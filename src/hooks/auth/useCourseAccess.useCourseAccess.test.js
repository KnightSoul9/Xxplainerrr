// Date: 2023-7-24
// Author: Generated by GoCodeo.


import { renderHook } from "@testing-library/react-hooks";
import useCourseAccess from "./useCourseAccess";
import useAuthService from "./useAuthService";
import { getCoursePageInfo } from "@/src/utils/firebase";

jest.mock("./useAuthService");
jest.mock("@/src/utils/firebase");

describe("useCourseAccess", () => {
  const currentUser = { uid: "123" };
  const courseSlug = "course-slug";
  const courseId = "course-id";

  beforeEach(() => {
    useAuthService.mockReturnValue({ currentUser });
    getCoursePageInfo.mockResolvedValue({ hasCourseAccess: true, courseId });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("should fetch course page info and set hasCourseAccess and courseId", async () => {
    const { result, waitForNextUpdate } = renderHook(() =>
      useCourseAccess(courseSlug)
    );

    await waitForNextUpdate();

    expect(getCoursePageInfo).toHaveBeenCalledWith({
      userId: currentUser.uid,
      courseSlug,
    });
    expect(result.current.hasCourseAccess).toBe(true);
    expect(result.current.courseId).toBe(courseId);
  });

  it("should set hasCourseAccess and courseId to false and null if user does not have course access", async () => {
    getCoursePageInfo.mockResolvedValue({ hasCourseAccess: false, courseId });

    const { result, waitForNextUpdate } = renderHook(() =>
      useCourseAccess(courseSlug)
    );

    await waitForNextUpdate();

    expect(result.current.hasCourseAccess).toBe(false);
    expect(result.current.courseId).toBe(null);
  });

  it("should set hasCourseAccess and courseId to false and null if course page info", async () => {
    getCoursePageInfo.mockRejectedValue(new Error("Failed to fetch course page info"));

    const { result, waitForNextUpdate } = renderHook(() =>
      useCourseAccess(courseSlug)
    );

    await waitForNextUpdate();

    expect(result.current.hasCourseAccess).toBe(false);
    expect(result.current.courseId).toBe(null);
  });
});